#!/bin/sh

# The file to store all bookmarks.
#
# The bookmarks are listed as
# <link>\t<tags>\t<title>
BM_FILE="${XDG_DATA_HOME:-$HOME/.local/share}/bm-list"

usage() {
  cat << END
Create, edit, or list bookmarks to open.

USAGE: bm [-hl]

  -h    Show this help information.
  -l    List all bookmarks for the user to select.

By default, asks to create a new or edit an existing bookmark with the link in
the PRIMARY selection(read more at
https://freedesktop.org/wiki/Specifications/ClipboardsWiki).

The bookmarks are saved at "$BM_FILE", which can be edited directly, provided
every entry is separated by a newline and are listed as

  <link><TAB><tags><TAB><title>

where each of the elements do not have a TAB character within them.

END
}

# Wrapper for running dmenu with common options.
#
# Takes arguments as prompt and initial text respectively.
run_dmenu() {
  dmenu -i -F -l 20 -p "$1" -it "$2"
}

# Wrapper for notify-send with a common title.
notify() {
  notify-send "bm" "$1"
}

# Get the bookmark link from an entry.
get_link() {
  echo "$1" | cut -f1
}

# Get the bookmark tags from an entry.
get_tags() {
  echo "$1" | cut -f2
}

# Get the bookmark title from an entry.
#
# The string from the third field onwards of the entry is considered as the
# title.
get_title() {
  echo "$1" | cut -f3-
}

# Adds an entry to the bookmark file.
#
# Concatenates the entry alongwith a copy of the bookmark file to place newly
# created entries at the top.
add_bm() {
  bm_temp="$(mktemp)"
  cp "$BM_FILE" "$bm_temp"
  printf "%s\t%s\t%s\n" "$1" "$2" "$3" | cat - "$bm_temp" > "$BM_FILE"
  rm "$bm_temp"
}

# Deletes a provided entry from the bookmarks file.
delete_bm() {
  sed -i "\<$1<d" "$BM_FILE"
}

# Creates a new bookmark entry.
new_bm() {
  new_op="$(printf "Yes\nNo" | run_dmenu "Bookmark \"$1\"?")"
  case "$new_op" in
    Yes) \
      title="$(run_dmenu "Provide a recognizable title to bookmark \"$1\":" < /dev/null)"
      tags="$(run_dmenu "Provide tags separated by commas to bookmark \"$1\":" < /dev/null)"
      add_bm "$1" "$tags" "$title" && notify "Bookmark \"$1\" created." ;;
    No|*) notify "Bookmark creation aborted." && return 1 ;;
  esac
}

# Edits an existing bookmark entry.
edit_bm() {
  link="$(get_link "$1")"
  old_title="$(get_title "$1")"
  old_tags="$(get_tags "$1")"

  edit_op="$(printf "Edit bookmark\nDelete bookmark\nCancel" | run_dmenu "Bookmark \"$link\" already exists! Choose from the following options:")"
  case "$edit_op" in
    Edit*) \
      title="$(dmenu -it "$old_title" -p "Provide a recognizable title:" < /dev/null)"
      tags="$(dmenu -it "$old_tags" -p "Provide tags separated by commas to this bookmark:" < /dev/null)"
      # The user can press enter to keep the old title and/or tags; do nothing
      # if there is no need for modification
      [ "$old_title" = "$title" ] && [ "$old_tags" = "$tags" ] && notify "No modifications to do." && return 1

      # Delete the old entry, and add the modified entry at the top.
      delete_bm "$1" && add_bm "$link" "$tags" "$title" ;;
    Delete*) delete_bm "$1" && notify "Bookmark deleted." ;;
    *) notify "Bookmark edit aborted." && return 1 ;;
  esac
}

# Creates a new or edits an existing bookmark.
modify_bm() {
  selected="$(xclip -o)"
  [ -z "$selected" ] && notify "Nothing selected to bookmark." && return 1
  bookmark="$(grep -P "^\Q$selected\E" "$BM_FILE")"

  if [ -n "$bookmark" ]; then
    # Use the existing entry if found
    edit_bm "$bookmark"
  else
    # else use the currently selected text
    new_bm "$selected"
  fi
}

# Uses xdg-open to open a bookmark.
open_bm() {
  if [ "$(wc -l < "$BM_FILE")" -gt 0 ]; then
    # dmenu cannot properly display tab characters, convert them to spaces
    # before displaying
    open="$(tr "$(printf "\t")" ' ' < "$BM_FILE" | run_dmenu "Select bookmark to open:")"
    [ -z "$open" ] && return 1
    # just getting the first field with space delimiter should provide the link
    # as they shouldn't contain spaces within themselves
    xdg-open "$(echo "$open" | cut -d ' ' -f1)" && return 0
  else
    # The bookmark file is empty.
    notify "No bookmarks to open."
    return 1
  fi
}

[ -r "BM_FILE" ] || touch "$BM_FILE"

if [ "$#" -lt 1 ]; then
  modify_bm
elif [ "$#" -eq 1 ] && [ "$1" = "-l" ]; then
  open_bm
else
  [ ! "$1" = "-h" ] && printf "Undefined flag \"%s\".\n\n" "$1"
  usage
fi

